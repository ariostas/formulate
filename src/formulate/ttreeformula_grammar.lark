start: expression

expression: disjunction
          | expression ":" disjunction -> multi_out

disjunction: conjunction
           | disjunction "||" conjunction -> lor

conjunction: inversion
           | conjunction "&&" inversion -> land

inversion: comparison
         | "!" inversion -> linv

comparison: bitwise_or
          | comparison ">" bitwise_or -> gt
          | comparison ">=" bitwise_or -> gte
          | comparison "<" bitwise_or -> lt
          | comparison "<=" bitwise_or -> lte
          | comparison ("!=" ) bitwise_or -> neq
          | comparison "==" bitwise_or -> eq

bitwise_or: bitwise_xor
          | bitwise_or "|" bitwise_xor -> bor

bitwise_xor: bitwise_and
           | bitwise_xor "^" bitwise_and -> bxor

bitwise_and: bitwise_inversion
            | bitwise_and "&" bitwise_inversion -> band

bitwise_inversion: shift_expr
                 | "~" bitwise_inversion -> binv
shift_expr: sum
          | shift_expr "<<" sum -> lshift
          | shift_expr ">>" sum -> rshift

sum: term
   | term "+" sum  -> add
   | term "-" sum  -> sub

term: factor
    | factor "*" term -> mul
    | factor "/" term -> div
    | factor "%" term -> mod

factor: pow
      | factor matpos+ -> matr
      | "+" factor -> pos
      | "-" factor -> neg

pow: atom
   | atom "**" factor -> pow

matpos: "[" [sum] "]"

atom: "(" expression ")"
    | var_name -> symbol
    | NUMBER -> literal
    | func_name trailer  -> func

func_name: NAME | NAME "::" func_name
var_name: NAME | NAME "." var_name
trailer: "(" [arglist] ")"
arglist: expression ("," expression)* [","]
NAME: /[A-Za-z_][A-Za-z0-9_]*\$?/
%import common.NUMBER
%import common.WS
%ignore WS
